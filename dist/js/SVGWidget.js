define(["snmd-core/js/MQTT","require","js-logger"],function(e,t,s){"use strict";var i=null,r=function(){if(null!==i)throw new Error("Cannot instantiate more than one instance, use getInstance()!");this.widgetPrefixes={},this.ReWidgetName=/^([\w\-]+):([\w\-]+)$/};return r.getInstance=function(){return null===i&&(i=new r),i},r.prototype.srClassOpts=function(e,t){var s={base:["snmd-bcl-"+t],state:["snmd-scl-","snmd-scl-"+t+"-"]};return void 0!==e.type&&s.base.push("snmd-bcl-"+e.type.replace(":","_")),void 0!==e.bcls&&s.base.push.apply(s.base,e.bcls),void 0!==e.bcl&&s.base.push(e.bcl),void 0!==e.scls&&s.state.push.apply(s.state,e.scls),void 0!==e.scl&&s.state.push(e.scl),s},r.prototype.snmdRegisterPrefix=function(e,t){this.widgetPrefixes[e]=t},r.prototype.srCreateWidget=function(i,r,n){if(void 0!==n.type){var o=this.ReWidgetName.exec(n.type);if(o){if(void 0===this.widgetPrefixes[o[1]])return void s.error("[SVGWidget] Widget package prefix "+o[1]+"/ is unknown!");t([this.widgetPrefixes[o[1]]+"/js/Widgets/"+o[2]],function(t){try{var o=new t(i,r,n);void 0!==n.topics&&n.topics.forEach(function(t){e.srRegisterTopic(t,o)})}catch(e){return s.error("[SVGWidget] Failed to create widget "+r.id+" of type "+n.type+":"),void s.error(e)}})}else s.error("[SVGWidget] Widget "+r.id+" has a invalid syntax for 'type'!")}else s.error("[SVGWidget] Widget "+r.id+" has no type set!")},r.getInstance()});